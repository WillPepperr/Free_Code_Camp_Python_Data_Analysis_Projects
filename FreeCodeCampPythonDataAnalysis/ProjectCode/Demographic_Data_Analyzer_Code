import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file
    df = pd.read_csv('adult.data.csv')

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts()

    # What is the average age of men?
    men = df[df['sex'] == 'Male']  # Filter for men

    average_age_men = round(men['age'].mean(), 1)

    # What is the percentage of people who have a Bachelor's degree?
    bachelors = df[df['education'] == 'Bachelors']
    percentage_bachelors = round(bachelors['education'].count() / len(df) * 100, 1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

    # with `Bachelors`, `Masters`, or `Doctorate`
    advanced_degrees = df[df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    count_advanced_degrees = len(advanced_degrees[advanced_degrees['salary'] == '>50K'])

    higher_education = count_advanced_degrees

    # Inverse of function above, without `Bachelors`, `Masters`, or `Doctorate`
    without_degree = df[~df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    count_without_degrees = len(without_degree[without_degree['salary'] == '>50K'])

    lower_education = count_without_degrees

    # percentage with salary >50K
    higher_education_rich = round((count_advanced_degrees / len(advanced_degrees) *100), 1)
    lower_education_rich = round((count_without_degrees / len(without_degree) *100), 1)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    hours = df['hours-per-week'].value_counts()

    min_work_hours = min(hours)

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    min_hours = df[df['hours-per-week'] == df['hours-per-week'].min()]

    num_min_workers = len(min_hours)

    rich_min_hours = min_hours[min_hours['salary'] == '>50K']
    rich_percentage = (len(rich_min_hours)/len(min_hours) * 100)

    # What country has the highest percentage of people that earn >50K?
    over_fifty_k = df[df['salary'] == '>50K']
    country_counts = df['native-country'].value_counts()
    over_fifty_k_counts = over_fifty_k['native-country'].value_counts()
    percentage_over_fifty_k = (over_fifty_k_counts / country_counts)


    highest_earning_country = percentage_over_fifty_k.idxmax()
    highest_earning_country_percentage = round((percentage_over_fifty_k.max() *100), 1)

    # Identify the most popular occupation for those who earn >50K in India.
    india = df[df['native-country'] == 'India']
    india_rich = india[india['salary'] == '>50K']
    india_occupations = india_rich['occupation'].value_counts()

    top_IN_occupation = india_occupations.idxmax()

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
calculate_demographic_data()
